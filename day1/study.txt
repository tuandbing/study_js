一. <script>元素
    将 JavaScript 插入 HTML 的主要方法是使用<script>元素。这个元素是由网景公司创造出来，并
最早在 Netscape Navigator 2 中实现的。后来，这个元素被正式加入到 HTML 规范。<script>元素有下
列 8 个属性。
1. async：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其
他脚本加载。只对外部脚本文件有效。
2. charset：可选。使用 src 属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不
在乎它的值。
3. crossorigin：可选。配置相关请求的CORS（跨源资源共享）设置。默认不使用CORS。crossorigin= 
"anonymous"配置文件请求不必设置凭据标志。crossorigin="use-credentials"设置凭据
标志，意味着出站请求会包含凭据。
4. defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。
在 IE7 及更早的版本中，对行内脚本也可以指定这个属性。
5. integrity：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，
Subresource Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，
脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提
供恶意内容。
6. language：废弃。最初用于表示代码块中的脚本语言（如"JavaScript"、"JavaScript 1.2"
或"VBScript"）。大多数浏览器都会忽略这个属性，不应该再使用它。
7. src：可选。表示包含要执行的代码的外部文件。
8. type：可选。代替 language，表示代码块中脚本语言的内容类型（也称 MIME 类型）。按照惯
例，这个值始终都是"text/javascript"，尽管"text/javascript"和"text/ecmascript"
都已经废弃了。JavaScript 文件的 MIME 类型通常是"application/x-javascript"，不过给
type 属性这个值有可能导致脚本被忽略。在非 IE 的浏览器中有效的其他值还有
"application/javascript"和"application/ecmascript"。如果这个值是 module，则代
码会被当成 ES6 模块，而且只有这时候代码中才能出现 import 和 export 关键字。

    使用<script>的方式有两种：
    通过它直接在网页中嵌入 JavaScript 代码，以及通过它在网页中包含外部 JavaScript 文件。
    要嵌入行内 JavaScript 代码，直接把代码放在<script>元素中就行：
    <script> 
        function sayHi() { 
            console.log("Hi!"); 
        } 
    </script> 
    在使用行内 JavaScript 代码时，要注意代码中不能出现字符串</script>。
比如，下面的代码会导致浏览器报错：
    <script> 
        function sayScript() { 
            console.log("</script>"); 
        } 
    </script> 
    浏览器解析行内脚本的方式决定了它在看到字符串</script>时，会将其当成结束的</script>
标签。想避免这个问题，只需要转义字符“\”①即可：
    <script> 
        function sayScript() { 
            console.log("<\/script>"); 
        } 
    </script> 
    要包含外部文件中的 JavaScript，就必须使用 src 属性。
这个属性的值是一个 URL，指向包含JavaScript 代码的文件，比如：
    <script src="example.js"></script>
    注意：使用了 src 属性的<script>元素不应该再在<script>和</script>标签中再包含其他
JavaScript 代码。如果两者都提供的话，则浏览器只会下载并执行脚本文件，从而忽略行内代码。
    <script>元素的 src 属性可以是一个完整的 URL，而且这个 URL 指向的
资源可以跟包含它的 HTML 页面不在同一个域中，比如这个例子：
    <script src="http://www.somewhere.com/afile.js"></script>
    不管包含的是什么代码，浏览器都会按照<script>在页面中出现的顺序依次解释它们，
前提是它们没有使用 defer 和 async 属性。
第二个<script>元素的代码必须在第一个<script>元素的代码解释完毕才能开始解释，
第三个则必须等第二个解释完，以此类推。

二. 标签位置
    过去，所有<script>元素都被放在页面的<head>标签内
    现代 Web 应用程序通常将所有 JavaScript 引用放在<body>元素中的页面内容后面

三. 推迟执行脚本
    HTML 4.01 为<script>元素定义了一个叫 defer 的属性。这个属性表示脚本在执行的时候不会改
变页面的结构。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，在<script>元素上
设置 defer 属性，相当于告诉浏览器立即下载，但延迟执行。
<!DOCTYPE html> 
<html> 
 <head> 
    <title>Example HTML Page</title> 
    <script defer src="example1.js"></script> 
    <script defer src="example2.js"></script> 
 </head> 
 <body> 
    <!-- 这里是页面内容 --> 
 </body> 
</html> 

    虽然这个例子中的<script>元素包含在页面的<head>中，但它们会在浏览器解析到结束的</html>标签后才会执行。

如前所述，defer 属性只对外部脚本文件才有效。

四. 异步执行脚本
    HTML5 为<script>元素定义了 async 属性。从改变脚本处理方式上看，async 属性与 defer 类似。
当然，它们两者也都只适用于外部脚本，都会告诉浏览器立即开始下载。不过，与 defer 不同的是，
标记为 async 的脚本并不保证能按照它们出现的次序执行，比如：
<!DOCTYPE html> 
<html> 
 <head> 
    <title>Example HTML Page</title> 
    <script async src="example1.js"></script> 
    <script async src="example2.js"></script> 
 </head> 
 <body> 
    <!-- 这里是页面内容 --> 
 </body> 
</html> 

    在这个例子中，第二个脚本可能先于第一个脚本执行。重点在于它们之间没有依赖关系。
    脚本添加 async 属性的目的是告诉浏览器，不必等脚本下载和执行完后再加载页面，
同样也不必等到该异步脚本下载和执行后再加载其他脚本。正因为如此，异步脚本不应该在加载期间修改 DOM。